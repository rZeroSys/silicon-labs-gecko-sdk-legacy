{% import "common.template" as common %}
{% set features = [] %}
{% set arch = context["ARCHITECTURE_ID"].split("+") %}
{% set boards = {} %}
{% for d in context["CODEGEN"] %}
  {% if "boards" in d %}
    {% do boards.update(d["boards"]) %}
  {% endif %}
{% endfor %}
{% set board = arch[1]|upper %}
{% if board != "NONE" %}
  {% set features = boards[board]["Features"] %}
{% endif %}
{% set modules = {} %}
{% for d in context["CODEGEN"] %}
  {% if "modules" in d %}
    {% do modules.update(d["modules"]) %}
  {% endif %}
{% endfor %}
{% set module = common.getArchIdModifier(arch, "module")|upper %}
{% if module %}
  {% for f in modules[module]["Features"] %}
    {% do features.append(f) %}
  {% endfor %}
{% endif %}
/***************************************************************************//**
 * @file
 * @brief init_board.c
 *******************************************************************************
 * # License
 * <b>Copyright 2018 Silicon Laboratories Inc. www.silabs.com</b>
 *******************************************************************************
 *
 * The licensor of this software is Silicon Laboratories Inc. Your use of this
 * software is governed by the terms of Silicon Labs Master Software License
 * Agreement (MSLA) available at
 * www.silabs.com/about-us/legal/master-software-license-agreement. This
 * software is distributed to you in Source Code format and is governed by the
 * sections of the MSLA applicable to Source Code.
 *
 ******************************************************************************/

#if defined(HAL_CONFIG)
#include "bsphalconfig.h"
#include "hal-config.h"
#else
#include "bspconfig.h"
#endif

#include "board_features.h"
#include "em_cmu.h"

{% if "EFP" in features %}
#include "sl_efp.h"
#include "sl_efp_efp_config.h"

static sl_efp_handle_data_t efp_handle_data;
static sl_efp_handle_t      efp = &efp_handle_data;
{% endif %}

{% if board == "NONE" %}
#warning "WARNING: Custom boards contain no init code in initBoard. Please make sure you have created the init code needed for your board."
void initBoard(void)
{
#if defined(CRYOTIMER_PRESENT)
  // Enable clock for CRYOTIMER
  CMU_ClockEnable(cmuClock_CRYOTIMER, true);
#elif defined(BURTC_PRESENT)
  // Enable clock for BURTC
  CMU_ClockEnable(cmuClock_BURTC, true);
#endif
  // Enable clock for USART0
  CMU_ClockEnable(cmuClock_USART0, true);
  // Enable clock for PRS (for possible USART PRS triggering)
  CMU_ClockEnable(cmuClock_PRS, true);
  // Enable GPIO clock source
  CMU_ClockEnable(cmuClock_GPIO, true);
  // Place custom board initialization code here.
}

{% else %}
#include "em_cmu.h"
{% if "SPI_FLASH" in features %}

#include "em_usart.h"
#include "mx25flash_spi.h"
{% endif %}
{% if "FEM" in features %}

#include "fem-control.h"
{% endif %}

#include "bsp.h"

void initBoard(void)
{
{% if "EFP" in features %}
  sl_status_t status;
  uint8_t tmp;
{% endif %}

{% if "CRYOTIMER" in features %}
  // Enable clock for CRYOTIMER
  CMU_ClockEnable(cmuClock_CRYOTIMER, true);
{% elif "BURTC" in features %}
  // Enable clock for BURTC
  CMU_ClockEnable(cmuClock_BURTC, true);
{% endif %}
#if ((HAL_VCOM_ENABLE == 1) \
    || (HAL_USART3_ENABLE == 1) \
    || (HAL_USART1_ENABLE == 1) \
    || (HAL_USART0_ENABLE == 1))
#if defined(FEATURE_EXP_HEADER_USART3)
  // Enable clock for USART3
  CMU_ClockEnable(cmuClock_USART3, true);
#elif defined(FEATURE_EXP_HEADER_USART1)
  // Enable clock for USART1
  CMU_ClockEnable(cmuClock_USART1, true);
#else
  // Enable clock for USART0
  CMU_ClockEnable(cmuClock_USART0, true);
#endif
#endif //(HAL_VCOM_ENABLE == 1)
#if ((HAL_I2CSENSOR_ENABLE == 1) \
    || (HAL_VCOM_ENABLE == 1) \
    || (HAL_SPIDISPLAY_ENABLE == 1) \
    || (HAL_USART3_ENABLE == 1) \
    || (HAL_USART1_ENABLE == 1) \
    || (HAL_USART0_ENABLE == 1))
  // Enable clock for PRS
  CMU_ClockEnable(cmuClock_PRS, true);
  // Enable GPIO clock source
  CMU_ClockEnable(cmuClock_GPIO, true);
#endif /* ((HAL_I2CSENSOR_ENABLE == 1) \
           || (HAL_VCOM_ENABLE == 1) \
           || (HAL_SPIDISPLAY_ENABLE == 1) \
           || (HAL_USART3_ENABLE == 1) \
           || (HAL_USART1_ENABLE == 1) \
           || (HAL_USART0_ENABLE == 1)) */
{% if "SPI_FLASH" in features %}

  // Put the SPI flash into Deep Power Down mode for those radio boards where it is available
  MX25_init();
  MX25_DP();
  // We must disable SPI communication
  MX25_deinit();
{% endif %}
{% if "FEM" in features %}

  // Initialize FEM
  initFem();
{% endif %}
{% if "IOEXPANDER" in features %}

  // Initialize IO Expander
  BSP_Init(BSP_INIT_IOEXP);
{% endif %}

{% if "EFP" in features %}
  // Initialize the EFP
  sl_efp_init_data_t init = SL_EFP_INSTANCE_INIT;
  init.enable_irq_pin = false;
  sl_efp_init(efp, &init);

  // Set VOB EM23 targets
  sl_efp_set_vob_em23_voltage(efp, 1100);
  sl_efp_write_register_field(efp,
                              EFP01_BB_IPK,
                              1,
                              _EFP01_BB_IPK_BB_IPK_EM2_MASK,
                              _EFP01_BB_IPK_BB_IPK_EM2_SHIFT);

  // Set VOB target to higher level to guarantee it will overdrive the EFR32 LDO output
  sl_efp_set_vob_em01_voltage(efp, 1130);

  // Set min peak current
  sl_efp_write_register_field(efp, EFP01_BK_IPK, 0,
                              _EFP01_BK_IPK_BK_IPK_MASK,
                              _EFP01_BK_IPK_BK_IPK_SHIFT);

  // Set min Ton time
  sl_efp_write_register_field(efp, EFP01_BK_CTRL1,
                              1,
                              _EFP01_BK_CTRL1_BK_TON_MAX_MASK,
                              _EFP01_BK_CTRL1_BK_TON_MAX_SHIFT);

  // Set max current limit
  sl_efp_write_register_field(efp, EFP01_BK_CTRL2,
                              15,
                              _EFP01_BK_CTRL2_BK_IRI_CON_MASK,
                              _EFP01_BK_CTRL2_BK_IRI_CON_SHIFT);

  // Enable VOB.
  sl_efp_set_vob_mode(efp, efp_vob_mode_buck);

  // Make sure VOB is ready before turning off internal LDO regulator.
  do {
    status = sl_efp_read_register(efp, EFP01_STATUS_LIVE, &tmp);
  } while (((tmp & _EFP01_STATUS_LIVE_VOB_INREG_LIVE_MASK) == 0)
           || (status != SL_STATUS_OK));

  // Set desired peak current
  sl_efp_write_register_field(efp, EFP01_BK_IPK, 10,
                              _EFP01_BK_IPK_BK_IPK_MASK,
                              _EFP01_BK_IPK_BK_IPK_SHIFT);

  // Set desired TON MAX
  sl_efp_write_register_field(efp, EFP01_BK_CTRL1,
                              7,
                              _EFP01_BK_CTRL1_BK_TON_MAX_MASK,
                              _EFP01_BK_CTRL1_BK_TON_MAX_SHIFT);

  // Disable current limit
  sl_efp_write_register_field(efp, EFP01_BK_CTRL2,
                              0,
                              _EFP01_BK_CTRL2_BK_IRI_CON_MASK,
                              _EFP01_BK_CTRL2_BK_IRI_CON_SHIFT);

  // Turn off internal xG21 LDO regulator.
  sl_efp_emu_ldo_enable(efp, false);

  // Set desired VOB voltage
  sl_efp_set_vob_em01_voltage(efp, 1100);
{% endif %}
}
{% endif %}

void initVcomEnable(void)
{
{% if "DISPEN_SENSEN_VCOMEN_ON_SAME_PIN" not in features %}
  {% if "VCOM" in features %}
#if defined(HAL_VCOM_ENABLE)
  // Enable VCOM if requested
    {% if "IOEXPANDER" in features %}
  BSP_PeripheralAccess(BSP_IOEXP_VCOM, HAL_VCOM_ENABLE);
    {% else %}
  GPIO_PinModeSet(BSP_VCOM_ENABLE_PORT, BSP_VCOM_ENABLE_PIN, gpioModePushPull, HAL_VCOM_ENABLE);
    {% endif %}
#endif // HAL_VCOM_ENABLE
  {% endif %}
{% else %}
#warning "WARNING: This radio board uses the same GPIO pin to enable the VCOM port, the LCD display and the temperature sensor! Enabling any of these features might disrupt the serial pins of the EXP header!"
#if defined(HAL_I2CSENSOR_ENABLE) || defined(HAL_SPIDISPLAY_ENABLE) || defined(HAL_VCOM_ENABLE)
#if HAL_I2CSENSOR_ENABLE || HAL_SPIDISPLAY_ENABLE || HAL_VCOM_ENABLE
#define COMMON_ENABLE 1
#else
#define COMMON_ENABLE 0
#endif

#if defined(BSP_I2CSENSOR_ENABLE_PORT)
#define ENABLE_PORT BSP_I2CSENSOR_ENABLE_PORT
#define ENABLE_PIN BSP_I2CSENSOR_ENABLE_PIN
#elif defined(BSP_SPIDISPLAY_ENABLE_PORT)
#define ENABLE_PORT BSP_SPIDISPLAY_ENABLE_PORT
#define ENABLE_PIN BSP_SPIDISPLAY_ENABLE_PIN
#else
#define ENABLE_PORT BSP_VCOM_ENABLE_PORT
#define ENABLE_PIN BSP_VCOM_ENABLE_PIN
#endif

  //Enable if requested
  GPIO_PinModeSet(ENABLE_PORT, ENABLE_PIN, gpioModePushPull, COMMON_ENABLE);

#endif
{% endif %}
}